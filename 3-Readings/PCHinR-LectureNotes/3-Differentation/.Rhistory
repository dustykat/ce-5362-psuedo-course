message("something is really wrong -- check the vectors!")
return()
}
#################################################################################################
# load the data vectors, temp and densitySI
tempSI<-c(0.00,5.00,10.00,15.00,20.00,25.00,30.00,35.00,40.00,50.00,60.00,70.00,80.00,90.00,100.00)
densitySI<-c(1000.00,1000.00,1000.00,999.00,998.00,997.00,996.00,994.00,992.00,988.00,983.00,978.00,972.00,965.00,965.00)
# now call getAValue
result<-getAvalue(t,tempSI,densitySI)
return(result)
}
ls()
getDensitySI(1)
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
getDensitySI(40)
getDensitySI(45)
getDensitySI(50)
getDensitySI(44)
interpolate2pairs<-function(xstar,x1,y1,x2,y2){
# apply interpolation equation
#   does not trap errors (divide by zero, etc)
ystar <- y1 + (y2-y1)*(xstar-x1)/(x2-x1)
return(ystar)
}
interpolate2pairs(44,40,992,50,988)
tempSI<-c(0.00,5.00,10.00,15.00,20.00,25.00,30.00,35.00,40.00,50.00,60.00,70.00,80.00,90.00,100.00)
densitySI<-c(1000.00,1000.00,1000.00,999.00,998.00,997.00,996.00,994.00,992.00,988.00,983.00,978.00,972.00,965.00,965.00)
cbind(tempSI,densitySI)
getAvalue <- function(x,xvector,yvector){
# returns a y value for x interpolated from (xvector,yvector)
# xvector is assumed to be in a monotonic sequence
# function performs limited error checks
# NULL return is error indicator
# T.G. Cleveland July 2007
#
xvlength <- length(xvector)
yvlength <- length(yvector)
# check that vector lengths same
if(xvlength != yvlength){
message("vectors xvector and yvector different lengths -- exiting function")
return()
}
# check that x in range xvector
if(x < min(xvector)){
message(" x too small -- exiting function")
return()
}
if(x > max(xvector)){
message(" x too big -- exiting function")
return()
}
#
for (i in 1:(xvlength-1)){
if( (x >= xvector[i]) & (x < xvector[i+1]) ){
result = yvector[i]+(yvector[i+1]-yvector[i])*(x - xvector[i])/(xvector[i+1]-xvector[i])
return(result)
}
# next row
}
# check if at endpoint
if( (x >= xvector[xvlength-1]) & (x <= xvector[xvlength]) ){
result = yvector[i]+(yvector[i+1]-yvector[i])*(x - xvector[i])/(xvector[i+1]-xvector[i])
return(result)
}
# should never get to next line
message("something is really wrong -- check the vectors!")
return()
}
getAvalue(44,tempSI,densitySI)
tempSI<-c(0.00,5.00,10.00,15.00,20.00,25.00,30.00,35.00,40.00,50.00,60.00,70.00,80.00,90.00,100.00)
densitySI<-c(1000.00,1000.00,1000.00,999.00,998.00,997.00,996.00,994.00,992.00,988.00,983.00,978.00,972.00,965.00,965.00)
getAvalue <- function(x,xvector,yvector){
# returns a y value for x interpolated from (xvector,yvector)
# xvector is assumed to be in a monotonic sequence
# function performs limited error checks
# NULL return is error indicator
# T.G. Cleveland July 2007
#
xvlength <- length(xvector)
yvlength <- length(yvector)
# check that vector lengths same
if(xvlength != yvlength){
message("vectors xvector and yvector different lengths -- exiting function")
return()
}
# check that x in range xvector
if(x < min(xvector)){
message(" x too small -- exiting function")
return()
}
if(x > max(xvector)){
message(" x too big -- exiting function")
return()
}
#
for (i in 1:(xvlength-1)){
if( (x >= xvector[i]) & (x < xvector[i+1]) ){
result = yvector[i]+(yvector[i+1]-yvector[i])*(x - xvector[i])/(xvector[i+1]-xvector[i])
return(result)
}
# next row
}
# check if at endpoint
if( (x >= xvector[xvlength-1]) & (x <= xvector[xvlength]) ){
result = yvector[i]+(yvector[i+1]-yvector[i])*(x - xvector[i])/(xvector[i+1]-xvector[i])
return(result)
}
# should never get to next line
message("something is really wrong -- check the vectors!")
return()
}
getAvalue(44,tempSI,densitySI)
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
getDensitySI(44)
getDensitySI(44)
getDensitySI(45)
getDensitySI(65)
getDensitySI(66)
t<-seq(0,100,2)
d<-sapply(getDensitySI(t))
d<-(getDensitySI(t))
for(i in 1:length(t)){}
for(i in 1:length(t)){
}
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="l",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="l",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="p",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="s",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="l",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
# Example demonstrating use of functions
# load in the functions (must exist)
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getAvalue.R')
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
# Now use them
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="s",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
# Example demonstrating use of functions
# load in the functions (must exist)
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getAvalue.R')
source('~/Dropbox/1-CE-TTU-Classes/UnderDevelopment/CE4333-PCH-R/6-RScripts/getDensitySI.R')
# Now use them
getDensitySI(44)
getDensitySI(54)
getDensitySI(88)
t<-seq(0,100,2) # make a temperature vector 0 to 100 in 2 degree increments
d<-numeric(0) # forward declare d to store results
howMany<-length(t)
for(i in 1:howMany){
d[i]<-getDensitySI(t[i])
}
plot(t,d,type="l",xlab="Degrees Celsius",ylab="Density (kg/m^3)")
source('~/Dropbox/1-CE-TTU-Classes/CE3354-EngineeringHydrology/CE3354-2016-1-002/1-NewWebStructure/9-Exams/CE-3354-EXAM3-2016-1/0-EXAM3-LaTexSource/PlotBuilder.R')
length(unhyd)
length(rrain)
length(etime)
source('~/Dropbox/1-CE-TTU-Classes/CE3354-EngineeringHydrology/CE3354-2016-1-002/1-NewWebStructure/9-Exams/CE-3354-EXAM3-2016-1/0-EXAM3-LaTexSource/PlotBuilder.R')
length(etime)
length(rrain)
length(unhyd)
plot(etime,rrain)
plot(etime,rrain,type="s")
source('~/Dropbox/1-CE-TTU-Classes/CE3354-EngineeringHydrology/CE3354-2016-1-002/1-NewWebStructure/9-Exams/CE-3354-EXAM3-2016-1/0-EXAM3-LaTexSource/PlotBuilder.R')
plot(etime,rrain,type="s")
x<-c(0,1,2,3,4)
y<-x^2
plot(x,y,col=rgb(1,0,1,1))
plot(x,y,col=rgb(1,0,.5,1))
plot(x,y,col=rgb(.8,0,.5,1),pch=19)
plot(x,y,col=rgb(.8,0,.5,1),pch=19,lwd=3)
plot(x,y,col=rgb(.8,0,.5,1),pch=19,lwd=6)
plot(x,y,col=rgb(.9,0,.4,1),pch=19,lwd=6)
plot(x,y,col=rgb(.8,0,.4,1),pch=19,lwd=6)
x<-c(0,1,2,3,4,5)
y<-x^3
plot(x,y)
plot(x,y,pch=19,lwd=6,col=rgb(254,0,254,1))
plot(x,y,pch=19,lwd=6,col=rgb(0.8,0,0.5,1))
plot(x,y,pch=19,lwd=6,col=rgb(0.8,0,0.5,1),type="s")
lines(x,y,type="l",col=rgb(0.8,0,0.5,1),lwd=5)
lines(x,y,type="p",col=rgb(0.8,0,0.5,1),pch=19,lwd=9)
lines(x,y,type="p",col=rgb(0,0,0.5,1),pch=19,lwd=9)
plot(x,y,pch=19,lwd=6,col=rgb(0.8,0,0.5,1),type="s")
lines(x,y,type="l",col=rgb(0.8,0,0.5,1),lwd=5)
lines(x,y,type="p",col=rgb(0,0,0.5,1),pch=19,lwd=9)
lines(x,y,type="p",col=rgb(0,0,0.5,1),pch=19,lwd=9)
plot(x,y,pch=19,lwd=6,col=rgb(0.8,0,0.5,1),type="s")
setwd("~/")
# Pipe Network Simulator Using Newton-Raphson
########################################################
########## Read the Input Data from a file #############
########################################################
zz <- file("PipeNetwork.txt", "r") # Open a connection named zz to file named PipeNetork.txt
nodes <- as.numeric(readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
pipes <-as.numeric(readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
loops <-as.numeric(readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
diameter <- (readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
distance <- (readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
roughness <- (readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
viscosity <- (readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
flowguess <- (readLines(zz, n = 1, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
nodearcs <- (readLines(zz, n = nodes, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
looparcs <- (readLines(zz, n = loops, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
rhs_true <- (readLines(zz, n = loops, ok = TRUE, warn = TRUE,encoding = "unknown", skipNul = FALSE))
close(zz)
#############################################################
# convert the multiple column strings into numeric
#nodes <-as.numeric(unlist(strsplit(nodes,split=" ")))
#pipes <-as.numeric(unlist(strsplit(pipes,split=" ")))
#loops <-as.numeric(unlist(strsplit(loops,split=" ")))
diameter <-as.numeric(unlist(strsplit(diameter,split=" ")))
distance <-as.numeric(unlist(strsplit(distance,split=" ")))
roughness <-as.numeric(unlist(strsplit(roughness,split=" ")))
viscosity <-as.numeric(unlist(strsplit(viscosity,split=" ")))
flowguess <-as.numeric(unlist(strsplit(flowguess,split=" ")))
nodearcs <-as.numeric(unlist(strsplit(nodearcs,split=" ")))
looparcs <-as.numeric(unlist(strsplit(looparcs,split=" ")))
rhs_true <-as.numeric(unlist(strsplit(rhs_true,split=" ")))
# convert nodearcs and looparcs into matrices
nodearcs <-matrix(nodearcs,nrow=nodes,ncol=pipes,byrow = TRUE)
looparcs <-matrix(looparcs,nrow=loops,ncol=pipes,byrow = TRUE)
# echo input
# nodes
# pipes
# loops
# diameter
# distance
# roughness
# viscosity
# flowguess
# nodearcs
# looparcs
# rhs_true
# need some vectors
HowMany <- 25
tolerance1 <- 1e-24
tolerance2 <- 1e-16
velocity_pipe <-numeric(0)
reynolds <- numeric(0)
friction <- numeric(0)
geometry <- numeric(0)
lossfactor <- numeric(0)
funcMatrix <- matrix(0,nodes+loops,pipes)
jacbMatrix <- matrix(0,nodes+loops,pipes)
gq <- numeric(0)
###############################################################
##############Forward Define Support Functions#################
###############################################################
# Jain Friction Factor Function -- Tested OK 23SEP16
friction_factor <- function(roughness,diameter,reynolds){
temp1 <- roughness/(3.7*diameter);
temp2 <- 5.74/(reynolds^(0.9));
temp3 <- log10(temp1+temp2);
temp3 <- temp3^2;
friction_factor <- 0.25/temp3;
return(friction_factor)
}
# Velocity Function
velocity <- function(diameter,discharge){
velocity <- discharge/(0.25*pi*diameter^2)
return(velocity)
}
# Reynolds Number Function
reynolds_number <- function(velocity,diameter,mu){
reynolds_number <- abs(velocity)*diameter/mu
return(reynolds_number)
}
# Geometric factor function
k_factor <- function(howlong,diameter,gravity){
k_factor <- (16*howlong)/(2.0*gravity*pi^2*diameter^5)
return(k_factor)
}
###############################################################
###############################################################
###############################################################
# compute geometry factors (only need once, goes outside iteration loop)
for (i in 1:pipes)
{
geometry[i] <- k_factor(distance[i],diameter[i],32.2)
}
geometry
###############################################################
############# iteration outer loop start here #################
###############################################################
for (iteration in 1:HowMany){
# compute current velocity
for (i in 1:pipes)
{
velocity_pipe[i]<-velocity(diameter[i],flowguess[i])
}
velocity_pipe
# compute current reynolds
for (i in 1:pipes)
{
reynolds[i]<-reynolds_number(velocity_pipe[i],diameter[i],viscosity)
}
reynolds
# compute current friction factors
for (i in 1:pipes)
{
friction[i]<-friction_factor(roughness[i],diameter[i],reynolds[i])
}
friction
# compute current loss factor
for (i in 1:pipes)
{
lossfactor[i] <- friction[i]*geometry[i]*abs(flowguess[i])
}
lossfactor
# build the function matrix
for (i in 1:nodes)
{
for (j in 1:pipes)
{
funcMatrix[i,j] <- nodearcs[i,j]
}
}
for (i in nodes+1:loops)
{
for(j in 1:pipes)
{
funcMatrix[i,j] <- looparcs[i-nodes,j]*lossfactor[j]
}
}
funcMatrix
# build the current jacobian matrix
for (i in 1:nodes)
{
for (j in 1:pipes)
{
jacbMatrix[i,j] <- nodearcs[i,j]
}
}
for (i in nodes+1:loops)
{
for(j in 1:pipes)
{
jacbMatrix[i,j] <- looparcs[i-nodes,j]*2*lossfactor[j]
}
}
jacbMatrix
# now try the multiplication to build the G(Q) vector
gq <- funcMatrix %*% flowguess - rhs_true # cool -- working to here as expected
# now the tricky part! want to solve the linear system Jacob*dQ = G(Q) for dQ -- system is linear
dq <- solve(jacbMatrix,gq)
# now update the flows
flownew <- flowguess - dq
# now test for stopping
test <- abs(flownew - flowguess)
if(t(test) %*% test < tolerance1)
{
message("Update not changing -- exit loop and report current update")
message("Iteration count = ",iteration)
flowguess <- flownew
break
}
test <- abs(gq)
if(t(test) %*% test < tolerance2)
{
message("G(Q) close to zero -- exit loop and report current update")
message("Iteration count = ",iteration)
flowguess <- flownew
break
}
flowguess <- flownew
}
###############################################################
########### End of iteration loop -- solution below ###########
###############################################################
message("Current results ")
print(cbind(flowguess, gq, dq))
setwd("~/Dropbox")
setwd("~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation")
# R script to implement rectangular panel numerical integration
# forward define the integrand
y <- function(x){
y <- x * sqrt(1+x)
return(y)
}
# Here is the actual integrator program
# Read the lower limit, upper limit, and how many panels to use
xlow <- readline("What is the lower limit of integration?")
howMany <- readline("How many panels?")
xlow <- as.numeric(unlist(strsplit(xlow, ",")))
xhigh <- as.numeric(unlist(strsplit(xhigh, ",")))
howMany <- as.numeric(unlist(strsplit(howMany, ",")))
# Compute some constants
deltax <- (xhigh - xlow)/float(howMany)  # force real arithmetic
accumulated_area <- 0.0 # initialize the accumulator
xx <- xlow+deltax/2.0 # initial value for x at middle of left-most panel
for (i in 1:howMany){
accumulated_area <- accumulated_area + deltax*y(xx) # remember y is a function already defined
xx <- xx+deltax
}
# report result
message("Approximate value of integral from ",xlow," to ",xhigh," is: ",accumulated_area)
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
# R script to implement rectangular panel numerical integration
# forward define the integrand
y <- function(x){
y <- x * sqrt(1+x^2)
return(y)
}
# Here is the actual integrator program
# Read the lower limit, upper limit, and how many panels to use
xlow <- readline("What is the lower limit of integration? ")
howMany <- readline("How many panels? ")
xlow <- as.numeric(unlist(strsplit(xlow, ",")))
xhigh <- as.numeric(unlist(strsplit(xhigh, ",")))
howMany <- as.numeric(unlist(strsplit(howMany, ",")))
# Compute some constants
deltax <- (xhigh - xlow)/howMany
accumulated_area <- 0.0 # initialize the accumulator
xx <- xlow+deltax/2 # initial value for x at middle of left-most panel
for (i in 1:howMany){
accumulated_area <- accumulated_area + deltax*y(xx) # remember y is a function already defined
xx <- xx+deltax
}
# report result
message("Approximate value of integral from ",xlow," to ",xhigh," is: ",accumulated_area)
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/RectangularPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/TrapezoidalPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/TrapezoidalPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/TrapezoidalPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/3-Differentation/ParabolicPanelExample.R')
